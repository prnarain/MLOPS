# -*- coding: utf-8 -*-
"""MLOps_Assignment 3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OnZ85KybDTXyknARmu7hVuIVsESDesb-
"""

# Standard scientific Python imports
import matplotlib.pyplot as plt

# Import datasets, classifiers and performance metrics
from sklearn import datasets, svm, metrics
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from skimage.transform import rescale, resize, downscale_local_mean

digits = datasets.load_digits()
print(f"Total rows/images  in the dataset :{len(digits.data)}")
print(f"Total rows and columns in the dataset :{digits.data.shape}")
print(f"Total rows and columns(with each column size) in the dataset :{digits.images.shape}")
print(f"Shape of each image in the the dataset :{digits.images[-1].shape}")

## =====rescale function ================
import numpy as np

def fun_rescale(scale):
  #image_rescaled = digits.images
  image_rescaled = np.full([1797,8*scale,8*scale],None)    
  i = 0 
  for image in digits.images:
    image = rescale(image, scale, anti_aliasing=False) 
    image_rescaled[i] = image
    i = i+1
  return image_rescaled

image_rescaled_1 = fun_rescale(2)
image_rescaled_2 = fun_rescale(4)
image_rescaled_3 = fun_rescale(8)
print(f"Shape of each scaled (2 times) image in the the dataset :{image_rescaled_1.shape}")
print(f"Shape of each scaled (4 times) image in the the dataset :{image_rescaled_2.shape}")
print(f"Shape of each scaled (8 times) image in the the dataset :{image_rescaled_3.shape}")

print("print Original image")
_, axes = plt.subplots(nrows=1, ncols=4, figsize=(10, 3))
for ax, image, label in zip(axes, digits.images, digits.target):
    ax.set_axis_off()
    ax.imshow(image, cmap=plt.cm.gray_r, interpolation='nearest')
    ax.set_title('Training: %i' % label)

# flatten the images
n_samples = len(image_rescaled_1)
data = image_rescaled_1.reshape((n_samples, -1))

clf = svm.SVC(gamma=0.001)
X_train, X_test, y_train, y_test = train_test_split(
  data, digits.target, test_size=0.5, shuffle=False)
clf.fit(X_train, y_train)
predicted = clf.predict(X_test)    
acc1 = accuracy_score(y_test, predicted)
print ("Accuracy:", accuracy_score(y_test, predicted))


clf = svm.SVC(gamma=0.01)
X_train, X_test, y_train, y_test = train_test_split(
  data, digits.target, test_size=0.5, shuffle=False)
clf.fit(X_train, y_train)
predicted = clf.predict(X_test)    
acc2 = accuracy_score(y_test, predicted)
print ("Accuracy:", accuracy_score(y_test, predicted))


clf = svm.SVC(gamma=0.1)
X_train, X_test, y_train, y_test = train_test_split(
  data, digits.target, test_size=0.5, shuffle=False)
clf.fit(X_train, y_train)
predicted = clf.predict(X_test)    
acc3 = accuracy_score(y_test, predicted)
print ("Accuracy:", accuracy_score(y_test, predicted))

# flatten the images
n_samples = len(image_rescaled_1)
data = image_rescaled_1.reshape((n_samples, -1))

clf = svm.SVC(gamma=0.001)
X_train, X_test, y_train, y_test = train_test_split(
    data, digits.target, test_size=0.8, shuffle=False)
clf.fit(X_train, y_train)
predicted = clf.predict(X_test)
acc4 = accuracy_score(y_test, predicted)
print ("Accuracy:", accuracy_score(y_test, predicted))

clf = svm.SVC(gamma=0.01)
X_train, X_test, y_train, y_test = train_test_split(
    data, digits.target, test_size=0.8, shuffle=False)
clf.fit(X_train, y_train)
predicted = clf.predict(X_test)
acc5 = accuracy_score(y_test, predicted)
print ("Accuracy:", accuracy_score(y_test, predicted))

clf = svm.SVC(gamma=0.1)
X_train, X_test, y_train, y_test = train_test_split(
    data, digits.target, test_size=0.8, shuffle=False)
clf.fit(X_train, y_train)
predicted = clf.predict(X_test)
acc6 = accuracy_score(y_test, predicted)
print ("Accuracy:", accuracy_score(y_test, predicted))

# flatten the images
n_samples = len(image_rescaled_1)
data = image_rescaled_1.reshape((n_samples, -1))

clf = svm.SVC(gamma=0.001)
X_train, X_test, y_train, y_test = train_test_split(
    data, digits.target, test_size=0.9, shuffle=False)
clf.fit(X_train, y_train)
predicted = clf.predict(X_test)
acc7 = accuracy_score(y_test, predicted)
print ("Accuracy:",accuracy_score(y_test, predicted))

clf = svm.SVC(gamma=0.01)
X_train, X_test, y_train, y_test = train_test_split(
    data, digits.target, test_size=0.9, shuffle=False)
clf.fit(X_train, y_train)
predicted = clf.predict(X_test)
acc8 = accuracy_score(y_test, predicted)
print ("Accuracy:",accuracy_score(y_test, predicted))

clf = svm.SVC(gamma=0.1)
X_train, X_test, y_train, y_test = train_test_split(
    data, digits.target, test_size=0.9, shuffle=False)
clf.fit(X_train, y_train)
predicted = clf.predict(X_test)
acc9 = accuracy_score(y_test, predicted)
print ("Accuracy:",accuracy_score(y_test, predicted))

# flatten the images

n_samples = len(image_rescaled_2)
data = image_rescaled_2.reshape((n_samples, -1))

clf = svm.SVC(gamma=0.001)
X_train, X_test, y_train, y_test = train_test_split(
    data, digits.target, test_size=0.5, shuffle=False)
clf.fit(X_train, y_train)
predicted = clf.predict(X_test)
acc10 = accuracy_score(y_test, predicted)
print ("Accuracy:",accuracy_score(y_test, predicted))



clf = svm.SVC(gamma=0.01)
X_train, X_test, y_train, y_test = train_test_split(
    data, digits.target, test_size=0.5, shuffle=False)
clf.fit(X_train, y_train)
predicted = clf.predict(X_test)
acc11 = accuracy_score(y_test, predicted)
print ("Accuracy:",accuracy_score(y_test, predicted))


clf = svm.SVC(gamma=0.1)
X_train, X_test, y_train, y_test = train_test_split(
    data, digits.target, test_size=0.5, shuffle=False)
clf.fit(X_train, y_train)
predicted = clf.predict(X_test)
acc12 = accuracy_score(y_test, predicted)
print ("Accuracy:",accuracy_score(y_test, predicted))

# flatten the images
n_samples = len(image_rescaled_2)
data = image_rescaled_2.reshape((n_samples, -1))

clf = svm.SVC(gamma=0.001)
X_train, X_test, y_train, y_test = train_test_split(
    data, digits.target, test_size=0.8, shuffle=False)
clf.fit(X_train, y_train)
predicted = clf.predict(X_test)
acc13 = accuracy_score(y_test, predicted)
print("Accuracy",accuracy_score(y_test, predicted))

clf = svm.SVC(gamma=0.01)
X_train, X_test, y_train, y_test = train_test_split(
    data, digits.target, test_size=0.8, shuffle=False)
clf.fit(X_train, y_train)
predicted = clf.predict(X_test)
acc14 = accuracy_score(y_test, predicted)
print("Accuracy",accuracy_score(y_test, predicted))

clf = svm.SVC(gamma=0.1)
X_train, X_test, y_train, y_test = train_test_split(
    data, digits.target, test_size=0.8, shuffle=False)
clf.fit(X_train, y_train)
predicted = clf.predict(X_test)
acc15 = accuracy_score(y_test, predicted)
print("Accuracy",accuracy_score(y_test, predicted))

# flatten the images
n_samples = len(image_rescaled_2)
data = image_rescaled_2.reshape((n_samples, -1))

clf = svm.SVC(gamma=0.001)
X_train, X_test, y_train, y_test = train_test_split(
    data, digits.target, test_size=0.9, shuffle=False)
clf.fit(X_train, y_train)
predicted = clf.predict(X_test)
acc16 = accuracy_score(y_test, predicted)
print ("Accuracy:",accuracy_score(y_test, predicted))


clf = svm.SVC(gamma=0.01)
X_train, X_test, y_train, y_test = train_test_split(
    data, digits.target, test_size=0.9, shuffle=False)
clf.fit(X_train, y_train)
predicted = clf.predict(X_test)
acc17 = accuracy_score(y_test, predicted)
print ("Accuracy:",accuracy_score(y_test, predicted))

clf = svm.SVC(gamma=0.1)
X_train, X_test, y_train, y_test = train_test_split(
    data, digits.target, test_size=0.9, shuffle=False)
clf.fit(X_train, y_train)
predicted = clf.predict(X_test)
acc18 = accuracy_score(y_test, predicted)
print ("Accuracy:",accuracy_score(y_test, predicted))

# flatten the images
n_samples = len(image_rescaled_3)
data = image_rescaled_3.reshape((n_samples, -1))

clf = svm.SVC(gamma=0.001)
X_train, X_test, y_train, y_test = train_test_split(
    data, digits.target, test_size=0.5, shuffle=False)
clf.fit(X_train, y_train)
predicted = clf.predict(X_test)
acc19 = accuracy_score(y_test, predicted)
print ("Accuracy:",accuracy_score(y_test, predicted))

clf = svm.SVC(gamma=0.01)
X_train, X_test, y_train, y_test = train_test_split(
    data, digits.target, test_size=0.5, shuffle=False)
clf.fit(X_train, y_train)
predicted = clf.predict(X_test)
acc20 = accuracy_score(y_test, predicted)
print ("Accuracy:",accuracy_score(y_test, predicted))

clf = svm.SVC(gamma=0.1)
X_train, X_test, y_train, y_test = train_test_split(
    data, digits.target, test_size=0.5, shuffle=False)
clf.fit(X_train, y_train)
predicted = clf.predict(X_test)
acc21 = accuracy_score(y_test, predicted)
print ("Accuracy:",accuracy_score(y_test, predicted))

# flatten the images
n_samples = len(image_rescaled_3)
data = image_rescaled_3.reshape((n_samples, -1))

clf = svm.SVC(gamma=0.001)
X_train, X_test, y_train, y_test = train_test_split(
    data, digits.target, test_size=0.8, shuffle=False)
clf.fit(X_train, y_train)
predicted = clf.predict(X_test)
acc22 = accuracy_score(y_test, predicted)
print ("Accuracy:",accuracy_score(y_test, predicted))

clf = svm.SVC(gamma=0.1)
X_train, X_test, y_train, y_test = train_test_split(
    data, digits.target, test_size=0.8, shuffle=False)
clf.fit(X_train, y_train)
predicted = clf.predict(X_test)
acc23 = accuracy_score(y_test, predicted)
print ("Accuracy:",accuracy_score(y_test, predicted))

clf = svm.SVC(gamma=1)
X_train, X_test, y_train, y_test = train_test_split(
    data, digits.target, test_size=0.8, shuffle=False)
clf.fit(X_train, y_train)
predicted = clf.predict(X_test)
acc24 = accuracy_score(y_test, predicted)
print ("Accuracy:",accuracy_score(y_test, predicted))

# flatten the images
n_samples = len(image_rescaled_3)
data = image_rescaled_3.reshape((n_samples, -1))

# Create a classifier: a support vector classifier
clf = svm.SVC(gamma=0.001)
X_train, X_test, y_train, y_test = train_test_split(
    data, digits.target, test_size=0.9, shuffle=False)
clf.fit(X_train, y_train)
predicted = clf.predict(X_test)
acc25 = accuracy_score(y_test, predicted)
print ("Accuracy:", accuracy_score(y_test, predicted))


clf = svm.SVC(gamma=0.01)
X_train, X_test, y_train, y_test = train_test_split(
    data, digits.target, test_size=0.9, shuffle=False)
clf.fit(X_train, y_train)
predicted = clf.predict(X_test)
acc26 = accuracy_score(y_test, predicted)
print ("Accuracy:", accuracy_score(y_test, predicted))

clf = svm.SVC(gamma=0.1)
X_train, X_test, y_train, y_test = train_test_split(
    data, digits.target, test_size=0.9, shuffle=False)
clf.fit(X_train, y_train)
predicted = clf.predict(X_test)
acc27 = accuracy_score(y_test, predicted)
print ("Accuracy:", accuracy_score(y_test, predicted))

print ("rescale 2x - accuracy\n")
print ("Gamma------- 0.001-0.01-0.1 \n")
print ("(Test 0.5) ",round(acc1,2),round(acc2,2),round(acc3,2))
print ("(Test 0.8) ",round(acc4,2),round(acc5,2),round(acc6,2))
print ("(Test 0.9) ",round(acc7,2),round(acc8,2),round(acc9,2))


print ("\nrescale 4x - accuracy\n")
print ("Gamma------- 0.001-0.01-0.1 \n")
print ("(Test 0.5) ",round(acc10,2),round(acc11,2),round(acc12,2))
print ("(Test 0.8) ",round(acc13,2),round(acc14,2),round(acc15,2))
print ("(Test 0.9) ",round(acc16,2),round(acc17,2),round(acc18,2))


print ("\nrescale 8x - accuracy\n")
print ("Gamma------- 0.001-0.01-0.1 \n")
print ("(Test 0.5) ",round(acc19,2),round(acc20,2),round(acc21,2))
print ("(Test 0.8) ",round(acc22,2),round(acc23,2),round(acc24,2))
print ("(Test 0.9) ",round(acc25,2),round(acc26,2),round(acc27,2))